// ADDDDDDD
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model User {
  userId        String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  PointLog      PointLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QuestTask {
  questTaskid Int       @id @default(autoincrement())
  quest       Quest     @relation(fields: [questId], references: [questId])
  questId     Int
  user        User      @relation(fields: [userId], references: [userId])
  userId      String
  title       String
  description String
  points      Int
  dueAt       DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model QuestTaskFinisher {
  questTaskFinisherId Int      @id @default(autoincrement())
  quest               Quest    @relation(fields: [questId], references: [questId])
  questId             Int
  user                User     @relation(fields: [userId], references: [userId])
  userId              Int
  gainedPoints        Int
  createdAt           DateTime @default(now())
}

model PointLog {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [userId])
  userId      String
  action      String
  rowId       Int
  totalPoints Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

}

model Message {
  id              Int          @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversationId], references: [conversationId])
  converstationId Int
  user            User         @relation(fields: [userId], references: [userId])
  userId          String
  text            String
  createdAt       DateTime     @default(now())

}

model Conversation {
  conversationId Int       @id @default(autoincrement())
  quest          Quest     @relation(fields: [questId], references: [questId])
  questId        Int
  name           String
  createdAt      DateTime  @default(now())
  Message        Message[]
}

model Notification {
  notificationId Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [userId])
  userId         String
  message        String
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
}

model ConversationMember {
  conversationMemberId Int          @id @default(autoincrement())
  conversation         Conversation @relation(fields: [conversationId], references: [conversationId])
  converstatiosId      Int
  user                 User         @relation(fields: [userId], references: [userId])
  userId               Int
  createdAt            DateTime     @default(now())
  deletedAt            DateTime?
}
