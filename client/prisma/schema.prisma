datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdQuests Quest[]
  associatedQuests PartyMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quest {
  id                 Int      @id @default(autoincrement())
  wish               String
  difficulty         String
  visibility         String
  category           String
  creator            User @relation(fields:[creatorId], references: [id])
  wiki               String @default("[{\"type\":\"p\",\"children\":[{\"text\":\"\"}]}]")
  mentorMessage      String?
  estimatedStartDate DateTime @db.Date
  estimatedEndDate   DateTime @db.Date
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  completedAt        DateTime?
  deletedAt          DateTime?
  partyMembers PartyMember[]
  creatorId          String
}


model PartyMember{
  id                 Int      @id @default(autoincrement())
  quest Quest @relation(fields:[questId], references: [id])
  partyMember User @relation(fields:[memberId], references: [id])
  role QuestRole @default(MENTEE)
  outcome String
  obstacle String
  plan String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  deletedAt DateTime?
  memberId String
  questId Int
  @@unique([questId, memberId])
}


enum QuestRole {
  MENTOR
  MENTEE
  PARTY_LEADER
}

