// ADDDDDDD
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken") @db.Text
  access_token      String? @map("accessToken") @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @map("idToken") @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model User {
  userId        String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  PointLog      PointLog[]
}

model MentorApplication {
  mentorApplicationid Int    @id @default(autoincrement())
  mentorId            Int
  experience          String
  detailedExperience  String
  user                User   @relation(fields: [mentorId], references: [userId])
}

model MentorFile {
  id             Int       @id @default(autoincrement())
  mentorUploadId Int
  path           String
  createdAt      DateTime? @default(now())
  deletedAt      DateTime?
  user           User      @relation(fields: [mentorUploadId], references: [userId])
}

model Quest {
  questId            Int             @id @default(autoincrement())
  userId             String
  wish               String
  difficulty         QuestDifficulty @default(EASY)
  visibility         QuestVisibility @default(PRIVATE)
  category           QuestCategory   @default(SOCIAL)
  wiki               String          @default("[{\"type\":\"h1\",\"children\":[{\"text\":\"Welcome\"}]},{\"type\":\"p\",\"children\":[{\"text\":\"This is our Wiki where you can find tips, resources, and strategies to increase the success of us achieving our wishes. If you want to add here, just send me a message in our chat and I'll do it for you!\"}]},{\"type\":\"p\",\"children\":[{\"text\":\"\"}]},{\"type\":\"p\",\"children\":[{\"text\":\"\"},{\"type\":\"a\",\"url\":\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\"children\":[{\"text\":\"watch this awesome tip!\"}]},{\"text\":\"\"}]},{\"type\":\"p\",\"children\":[{\"text\":\" \"}]},{\"type\":\"p\",\"children\":[{\"text\":\"\"}]},{\"type\":\"p\",\"children\":[{\"text\":\"\"}]}]") @db.LongText
  mentorMessage      String?
  estimatedStartDate DateTime        @db.Date
  estimatedEndDate   DateTime        @db.Date
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  completedAt        DateTime?
  deletedAt          DateTime?
  partyMembers       PartyMember[]
  user               User            @relation(fields: [userId], references: [userId])
  posts              Post[]
}

model QuestTask {
  questTaskid Int       @id @default(autoincrement())
  quest       Quest     @relation(fields: [questId], references: [questId])
  questId     Int
  user        User      @relation(fields: [userId], references: [userId])
  userId      String
  title       String
  description String
  points      Int
  dueAt       DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model QuestTaskFinisher {
  questTaskFinisherId Int      @id @default(autoincrement())
  quest               Quest    @relation(fields: [questId], references: [questId])
  questId             Int
  user                User     @relation(fields: [userId], references: [userId])
  userId              Int
  gainedPoints        Int
  createdAt           DateTime @default(now())
}

model PointLog {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [userId])
  userId      String
  action      String
  rowId       Int
  totalPoints Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

}

model Message {
  id              Int          @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversationId], references: [conversationId])
  converstationId Int
  user            User         @relation(fields: [userId], references: [userId])
  userId          String
  text            String
  createdAt       DateTime     @default(now())

}

model Conversation {
  conversationId Int       @id @default(autoincrement())
  quest          Quest     @relation(fields: [questId], references: [questId])
  questId        Int
  name           String
  createdAt      DateTime  @default(now())
  Message        Message[]
}

model Notification {
  notificationId Int       @id @default(autoincrement())
  user           User      @relation(fields: [userId], references: [userId])
  userId         String
  message        String
  createdAt      DateTime  @default(now())
  deletedAt      DateTime?
}

model ConversationMember {
  conversationMemberId Int          @id @default(autoincrement())
  conversation         Conversation @relation(fields: [conversationId], references: [conversationId])
  converstatiosId      Int
  user                 User         @relation(fields: [userId], references: [userId])
  userId               Int
  createdAt            DateTime     @default(now())
  deletedAt            DateTime?
}

model PartyMember {
  partyMemberId Int             @id @default(autoincrement())
  userId        String
  questId       Int
  role          PartyMemberRole @default(MENTEE)
  outcome       String
  obstacle      String
  plan          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  deletedAt     DateTime?
  quest         Quest           @relation(fields: [questId], references: [questId])
  user          User            @relation(fields: [userId], references: [userId])

  @@unique([questId, userId, deletedAt])
}

enum QuestDifficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestVisibility {
  PUBLIC
  PRIVATE
}

enum QuestCategory {
  SOCIAL
  CAREER
  HEALTH
}

enum PartyMemberRole {
  MENTOR
  MENTEE
  PARTY_LEADER
}

// NEW START, basically before nag ingani ta post -> quest Post, post -> comment Post, pero karon separate jud
// did a workaround tungod ani https://github.com/prisma/prisma/issues/1644 kay ato react2 thingy

model Post {
  postId    Int        @id @default(autoincrement())
  userId    String
  questId   Int
  title     String
  body      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  deletedAt DateTime?
  postFiles PostFile[]
  comments  Comment[]
  user      User       @relation(fields: [userId], references: [userId])
  quest     Quest      @relation(fields: [questId], references: [questId])
}

model Comment {
  commentId Int       @id @default(autoincrement())
  postId    Int
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  post      Post      @relation(fields: [postId], references: [postId])
  user      User      @relation(fields: [userId], references: [userId])
}

model PostReact {
  postReactId Int       @id @default(autoincrement())
  postId      Int
  userId      String
  type        ReactType
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [userId])
}

model CommentReact {
  postReactId Int       @id @default(autoincrement())
  postId      Int
  userId      String
  type        ReactType // didnt follow convention since this will be used by 2 tables
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  user        User      @relation(fields: [userId], references: [userId])
}

//  before kay positive emotions ra and not these, kani lang kay nice ang emojis and i think it's necessary sad ang negative emotions (Inside Out) :),
// let users freely express their emotions basically
// didnt follow convention since this will be used by 2 tables
enum ReactType {
  LAUGH
  SAD
  CRYING
  SURPRISED
  PARTY
}

// NEW END

model PostFile {
  postFileId Int       @id @default(autoincrement())
  userId     String
  postId     Int
  path       String
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?
  user       User      @relation(fields: [userId], references: [userId])
  post       Post      @relation(fields: [postId], references: [postId])
}

model Badge {
  badgeId     Int         @id @default(autoincrement())
  name        String
  description String
  image       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  userBadges  UserBadge[]
}

model UserBadge {
  userBadgeId Int       @id @default(autoincrement())
  userId      String
  badgeId     Int
  createdAt   DateTime  @default(now())
  deletedAt   DateTime? // NEW, the user cant delete pero in case the user wants to delete the account we can delete for them
  user        User      @relation(fields: [userId], references: [userId])
  badge       Badge     @relation(fields: [badgeId], references: [badgeId])
}
